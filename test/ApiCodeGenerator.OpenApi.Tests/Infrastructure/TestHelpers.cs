#pragma warning disable SA1601 // Partial elements should be documented
namespace ApiCodeGenerator.OpenApi.Tests.Infrastructure
{
    internal static partial class TestHelpers
    {
        public const string NSWAG_VERSION = "14.0.2.0 (NJsonSchema v" + NJSON_VERSION + ")";
        public const string NJSON_VERSION = "11.0.0.0 (Newtonsoft.Json v" + NEWTON_VERSION + ")";
        public const string NEWTON_VERSION = "13.0.0.0";
        public const string GENERATED_CODE = "[System.CodeDom.Compiler.GeneratedCode(\"NJsonSchema\", \"" + NSWAG_VERSION + "\")]";
        public const string GENERATED_CODE_ATTRIBUTE = "[System.CodeDom.Compiler.GeneratedCode(\"NSwag\", \"" + NSWAG_VERSION + "\")]";

        public const string TestOperResponseText = "    " + GENERATED_CODE + "\n" +
            "    public partial class TestOperResponse\n" +
            "    {\n" +
            "        [Newtonsoft.Json.JsonProperty(\"id\", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]\n" +
            "        public int? Id { get; set; }\n" +
            "\n" +
            "    }\n";

        public const string OpenApiDocumentDeclaration =
            "\"openapi\": \"3.0.1\", \"info\": {\"version\": \"1.0.0\", \"title\": \"test\", \"contact\": { \"email\": \"apiteam@swagger.io\" }},";

        public static string GetSwaggerPath(string schemaFile) => Path.Combine("swagger", schemaFile);

        public static Task<OpenApiDocument> LoadSchemaAsync(string schemaFile)
        {
            var filePath = GetSwaggerPath(schemaFile);
            var data = File.ReadAllText(filePath);
            var document = data.StartsWith("{")
                ? OpenApiDocument.FromFileAsync(filePath)
                : OpenApiYamlDocument.FromFileAsync(filePath);
            return document;
        }

        public static void RunTest(CSharpClientGeneratorSettings settings, string expectedClientDeclartion, string schemaFile = "testSchema.json", string testOperResponseText = TestOperResponseText, string? usings = null)
        {
            OpenApiDocument document = LoadSchemaAsync(schemaFile).GetAwaiter().GetResult();
            RunTest(settings, expectedClientDeclartion, document, testOperResponseText, usings);
        }

        public static void RunTest(CSharpClientGeneratorSettings settings, string expectedClientDeclartion, OpenApiDocument apiDocument, string testOperResponseText = TestOperResponseText, string? usings = null)
        {
            var generator = CreateGenerator(apiDocument, settings);
            var expected = GetExpectedCode(expectedClientDeclartion, testOperResponseText, usings: usings);

            //Act
            var actual = generator.GenerateFile();

            //Assert
            Assert.AreEqual(expected, actual);
        }

        public static string GetExpectedCode(string? expectedClientDeclartion, string testOperResponseText = TestOperResponseText, string @namespace = "TestNS", string? usings = null)
        {
            if (!string.IsNullOrWhiteSpace(expectedClientDeclartion) && !expectedClientDeclartion.Contains(GENERATED_CODE_ATTRIBUTE))
            {
                expectedClientDeclartion = "    " + GENERATED_CODE_ATTRIBUTE + "\n" + expectedClientDeclartion;
            }

            var expected = "//----------------------\n" +
                "// <auto-generated>\n" +
                "//     Generated using the NSwag toolchain v" + NSWAG_VERSION + " (http://NSwag.org)\n" +
                "// </auto-generated>\n" +
                "//----------------------\n" +
                "\n" +
                (usings ?? GetAdditionalUsings()) +
                "#pragma warning disable 108 // Disable \"CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended.\"\n" +
                "#pragma warning disable 114 // Disable \"CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword.\"\n" +
                "#pragma warning disable 472 // Disable \"CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'\n" +
                "#pragma warning disable 612 // Disable \"CS0612 '...' is obsolete\"\n" +
                "#pragma warning disable 1573 // Disable \"CS1573 Parameter '...' has no matching param tag in the XML comment for ...\n" +
                "#pragma warning disable 1591 // Disable \"CS1591 Missing XML comment for publicly visible type or member ...\"\n" +
                "#pragma warning disable 8073 // Disable \"CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'\"\n" +
                "#pragma warning disable 3016 // Disable \"CS3016 Arrays as attribute arguments is not CLS-compliant\"\n" +
                "#pragma warning disable 8603 // Disable \"CS8603 Possible null reference return\"\n" +
                "#pragma warning disable 8604 // Disable \"CS8604 Possible null reference argument for parameter\"\n" +
                "#pragma warning disable 8625 // Disable \"CS8625 Cannot convert null literal to non-nullable reference type\"\n" +
                "\n" +
               $"namespace {@namespace}\n" +
                "{\n" +
                "    using System = global::System;\n" +
                (string.IsNullOrWhiteSpace(expectedClientDeclartion) ? string.Empty
                : (
                "\n" +
                expectedClientDeclartion)) +
                "\n" +
                testOperResponseText +
                "\n" +
                "\n" +
                "}\n\n" +
                "#pragma warning restore  108\n" +
                "#pragma warning restore  114\n" +
                "#pragma warning restore  472\n" +
                "#pragma warning restore  612\n" +
                "#pragma warning restore 1573\n" +
                "#pragma warning restore 1591\n" +
                "#pragma warning restore 8073\n" +
                "#pragma warning restore 3016\n" +
                "#pragma warning restore 8603\n" +
                "#pragma warning restore 8604\n" +
                "#pragma warning restore 8625";
            return expected;
        }

        public static IReadOnlyDictionary<string, IReadOnlyCollection<Type>> GetOperationGenerators()
           => AcgExtension.OperationGenerators
                .ToDictionary(
                    kv => kv.Key,
                    kv => (IReadOnlyCollection<Type>)[kv.Value]);
    }
}
#pragma warning restore SA1601 // Partial elements should be documented
